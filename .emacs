(setq auto-save-default nil)
(setq make-backup-files nil)
(setq inhibit-startup-message t)
(setq search-exit-char t)
(setq indent-tabs-mode nil)
(setq find-file-run-dired nil)
(setq text-mode-hook 'turn-on-auto-fill)
(setq scroll-step 1)

(define-key global-map "\M-\e" 'eval-expression)

(setq auto-mode-alist 
  (append '(("\\.[^/]*$" . myfun-mode)
            ("[^\\./]*$" . myfun-mode))
  auto-mode-alist))

(setq minor-mode-alist ())

(defvar myfun-mode-map nil "")

(setq myfun-mode-map ())

(defun myfun-mode ()
  (if myfun-mode-map ()
    (setq myfun-mode-map (make-sparse-keymap))
    (goto-command-mode)
    (define-key myfun-mode-map "z" 'goto-command-mode))
    (use-local-map myfun-mode-map)
  )

(add-hook 'lisp-interaction-mode-hook
  (function (lambda ()
    (define-key lisp-interaction-mode-map "q" 'save-buffers-kill-emacs)
    (define-key lisp-interaction-mode-map "x" 'switch-to-buffer))))

(put 'narrow-to-region 'disabled nil)
(put 'eval-expression 'disabled nil)

(defun do-search-forward (search-string)
  (interactive "s Search: ")
  (if (eq (length search-string) 0)
      (setq search-string save-string)
    (setq save-string search-string))
  (condition-case nil
      (search-forward search-string)
    (error (message "Not Found!")))
  )

(defun printf (text)
  (insert "printf (\"")
  (if (> (length text) 0)
    (insert (concat text ".")))
  (insert "\\n\");")
  (backward-char 2)
  (insert ", "))
  
(defun cout (text)
  (insert "printf(\"")
  (if (> (length text) 0)
    (insert (concat text ".")))
  (insert "\\n\");")
  (backward-char 2)
  (insert ", ")
  )

(defun println (text)
  (insert "System.out.println(")
  (if (> (length text) 0)
    (insert (concat "\"" text "\");" )))
  )

(defun for-loop ()
   (interactive)
  (insert "for (int i = 0; i < __; ++i)")
)

(defun dpr (text)
  (interactive "sText to print? ")
  (setq case-fold-search nil)

  (cond ((string-match "^.*\.c$" (buffer-name)) (printf text))
        ((string-match "^.*\.w$" (buffer-name)) (printf text))
        ((string-match "^.*\.C$" (buffer-name)) (cout text))
        ((string-match "^.*\.java$" (buffer-name)) (println text))
        ((string-match "^.*\.jw$" (buffer-name)) (println text))
        (t (insert "???")))

  (setq case-fold-search t)
  )

(defun do-kill-buffer ()
   (interactive)
   (kill-buffer (current-buffer))
   )

(defun goto-insert-mode () 
  (interactive)
  (define-key myfun-mode-map "a" 'self-insert-command)
  (define-key myfun-mode-map "b" 'self-insert-command)
  (define-key myfun-mode-map "c" 'self-insert-command)
  (define-key myfun-mode-map "d" 'self-insert-command)
  (define-key myfun-mode-map "e" 'self-insert-command)
  (define-key myfun-mode-map "f" 'self-insert-command)
  (define-key myfun-mode-map "g" 'self-insert-command)
  (define-key myfun-mode-map "h" 'self-insert-command)
  (define-key myfun-mode-map "i" 'self-insert-command)
  (define-key myfun-mode-map "j" 'self-insert-command)
  (define-key myfun-mode-map "k" 'self-insert-command)
  (define-key myfun-mode-map "l" 'self-insert-command)
  (define-key myfun-mode-map "m" 'self-insert-command)
  (define-key myfun-mode-map "n" 'self-insert-command)
  (define-key myfun-mode-map "o" 'self-insert-command)
  (define-key myfun-mode-map "p" 'self-insert-command)
  (define-key myfun-mode-map "q" 'self-insert-command)
  (define-key myfun-mode-map "r" 'self-insert-command)
  (define-key myfun-mode-map "s" 'self-insert-command)
  (define-key myfun-mode-map "S" 'self-insert-command)
  (define-key myfun-mode-map "t" 'self-insert-command)
  (define-key myfun-mode-map "u" 'self-insert-command)
  (define-key myfun-mode-map "v" 'self-insert-command)
  (define-key myfun-mode-map "w" 'self-insert-command)
  (define-key myfun-mode-map "x" 'self-insert-command)
  (define-key myfun-mode-map "y" 'self-insert-command)
  (define-key myfun-mode-map "." 'self-insert-command)
  (define-key myfun-mode-map "/" 'self-insert-command)
  (define-key myfun-mode-map "," 'self-insert-command)
  (define-key myfun-mode-map "[" 'self-insert-command)
  (define-key myfun-mode-map "]" 'self-insert-command)
  )

(defun goto-command-mode ()
  (interactive)
  (define-key myfun-mode-map "a" 'beginning-of-line)
  (define-key myfun-mode-map "b" 'backward-word)
  (define-key myfun-mode-map "c" 'dpr)
  (define-key myfun-mode-map "d" 'backward-kill-word)
  (define-key myfun-mode-map "e" 'end-of-line)
  (define-key myfun-mode-map "f" 'forward-word)
  (define-key myfun-mode-map "g" 'goto-line)
  (define-key myfun-mode-map "h" 'kill-region)
  (define-key myfun-mode-map "i" 'goto-insert-mode)
  (define-key myfun-mode-map "j" 'scroll-up)
  (define-key myfun-mode-map "k" 'kill-line)
  (define-key myfun-mode-map "l" 'recenter)
  (define-key myfun-mode-map "m" 'scroll-down)
  (define-key myfun-mode-map "n" 'next-line)
  (define-key myfun-mode-map "o" 'set-mark-command)
  (define-key myfun-mode-map "p" 'previous-line)
  (define-key myfun-mode-map "q" 'save-buffers-kill-emacs)
  (define-key myfun-mode-map "r" 'end-of-buffer)
  (define-key myfun-mode-map "s" 'replace-string)
  (define-key myfun-mode-map "S" 'replace-regexp)
  (define-key myfun-mode-map "t" 'beginning-of-buffer)
  (define-key myfun-mode-map "u" 'undo)
  (define-key myfun-mode-map "v" 'find-file)
  (define-key myfun-mode-map "w" 'save-buffer)
  (define-key myfun-mode-map "x" 'switch-to-buffer)
  (define-key myfun-mode-map "y" 'yank)
  (define-key myfun-mode-map "." 'do-kill-buffer)
  (define-key myfun-mode-map "/" 'do-search-forward)
  (define-key myfun-mode-map "," 'for-loop)
  )

(put 'set-goal-column 'disabled nil)

(defun narrow-to-line ()
  (interactive)
  (beginning-of-line)
  (setq a (point))
  (end-of-line)
  (setq b (point))
  (narrow-to-region a b)
  (beginning-of-line))


(setq minibuffer-max-depth nil)

(custom-set-faces)

(menu-bar-mode -1)

(setq enable-local-variables nil)
(setq x-select-enable-clipboard t)

(set-background-color "black")
(set-foreground-color "yellow")
(set-default-font "-outline-Courier New-normal-r-normal-normal-20-180-120-120-c-*-iso10646-1")

(setq-default ispell-program-name "c:\\progra~1\\Aspell\\bin\\aspell")
(setq ispell-dictionary "en_US")

